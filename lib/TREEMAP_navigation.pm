package TREEMAP_navigation;

## - this code was copied from the STRING project - many parts may not make sense for TREEMAP - ##

#########################################################################################
## TREEMAP_navigation.pm:
##
## This module is responsible for much of the actual HMTL output generated by TREEMAP.
## It is called upon to produce the 'standardized' parts of the ouput: Menu-bars, logos, 
## dialogs, errors, the CSS (cascading style sheet) ...
#########################################################################################

use strict;
use warnings;

use TREEMAP_globals;         ## to get path-information, and global defaults/colors.

$| = 1;                      ## to force direct output (output is sent directly to 
                             ## stdout -> no buffering).


#########################################################################################
## constructor: 
## 
## mainly concerned with setting safe defaults.
#########################################################################################

sub new {

    my ($that, $taskId, $sessionId, $userId, $is_main_page) = @_;

    my $class = ref($that) || $that;    
    my $self = {};
    bless $self, $class;

    $self->{taskId} = ($taskId or "_notask");
    $self->{sessionId} = ($sessionId or "_nosession");
    $self->{userId} = ($userId or "_nouser");
    $self->{autorefresh_url} = undef;
    $self->{refresh_interval} = undef;
    $self->{set_cookie} = "off";
    $self->{include_overlib_library} = "off";
    $self->{rotate_logo} = 0;
    $self->{is_main_page} = $is_main_page;

    $self->{cgi_path} = "$TREEMAP_globals::cgi_bin_dir";   ## apache-alias specifying the location of cgi-scripts.

    $self->{cgi_path} =~ s/\///g;

    $self->{navigation_top_printed} = 0;                   ## flag: prevents accidentally printing the top-part of the navigation twice.
    $self->{view_buttons_printed} = 0;                     ## flag: to prevent unnecessary JavaScript when buttons are not showing.

    $self->{title_illustration_visibility} = "off";
    $self->{active_menu_item} = 0;

    $self->{http_prefix} = "http";
    if (exists $ENV{HTTPS}) {
	if ($ENV{HTTPS} eq "on") { $self->{http_prefix} = "https"; }
    }

    return $self;
}


#####################################################################################
## to turn on the rotating logo in case we have the user waiting for results ...

sub activate_rotating_logo {   

    my ($self) = @_;
    $self->{rotate_logo} = 1;
}

#####################################################################################
## should we try to place a cookie ?

sub attempt_cookie {

    my ($self, $mode) = @_;
    $self->{set_cookie} = $mode;
}

#####################################################################################
## should we show the main menu ?    (default is 'yes')

sub set_title_illustration_visibility {
    
    my ($self, $visibility) = @_;
    $self->{title_illustration_visibility} = $visibility;
}

#####################################################################################
## which item on the main menu is active ?    (default is 'none')

sub set_active_main_menu_item {
    
    my ($self, $item) = @_;
    $self->{active_menu_item} = $item;
}

#####################################################################################
## should we include the overlib library ? 
## (this is a Javascript library for showing popup-menus.

sub include_overlib_library {

    my ($self, $mode) = @_;
    $self->{include_overlib_library} = $mode;
}

#####################################################################################
## to change where the navigation buttons point to:

sub set_cgi_path {

    my ($self, $path) = @_;
    $self->{cgi_path} = $path;
}

###############################################################################
## print_navigation_top:
##
## This routine prints that certain part of the HTML page which is (largely) 
## invariant for all pages of TREEMAP. There are two halves of invariant stuff: 
## the one before the content and the one after the content. This function here 
## is  responsible for the former.
###############################################################################

sub print_navigation_top {

    my ($self) = @_;

    return 0 if ($self->{navigation_top_printed});   ## refuse to print twice.

    $self->print_page_header_and_menus ();
    $self->{navigation_top_printed} = 1;  
    return 1;
}

###############################################################################
## print_navigation_bottom:
##
## This is the analog for the second half of the page.
###############################################################################

sub print_navigation_bottom {    

    my ($self) = @_;

    $self->print_page_footer ();
}

################################################################################
## print_page_footer:
##
##
################################################################################

sub print_page_footer {

    my ($self) = @_;

    print "</td>\n";
    print "</tr>\n";
    print "</table>\n";
    print "</td></tr></table>\n";
    print "</body>\n\n";
    print "</html>\n";
}

################################################################################
## subroutine: set_polling_url ()
##
##
################################################################################

sub set_polling_url {
    
    my ($self, $autorefresh_url, $refresh_interval) = @_;
    
    $self->{autorefresh_url} = $autorefresh_url;
    $self->{refresh_interval} = $refresh_interval;
}

################################################################################
## print_page_header_and_menus:
##
##
################################################################################

sub print_page_header_and_menus {
   
    my ($self) = @_;

    my $toggle_background = $TREEMAP_globals::webcolor_standard_grey;
    my $emphasis_color = $TREEMAP_globals::webcolor_emphasis;

    if ($self->{set_cookie} eq "on") {
	
	my $cookie_name = "treemap_embl_userid";
	my $cookie_value = $self->{userId};
	
	print "Set-Cookie: $cookie_name=$cookie_value; path=/; expires=Sun, 02-Oct-2033 16:37:39 GMT\n";
    }

    print "Content-type: text/html; charset=iso-8859-1; Expires: 0;";

    if ($self->{autorefresh_url}) {
	my $refresh_interval = 20;
	if ($self->{refresh_interval}) { $refresh_interval = $self->{refresh_interval}; }
	print " Refresh: $refresh_interval; URL=$self->{autorefresh_url};";
    }
        
    print "\n\n";
    
    print "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n";
    print "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n\n";
    print "<head>\n";
    print "<link rel='canonical' href='http://mltreemap.org/' />" if ($self->{is_main_page});
    print "<meta name=\"google-site-verification\" ";
    print "content=\"S-92tdR6F7Ol_on-oVgHARvQfpMciZzrpyBANTe-hWM\" />";
 
    if ($self->{autorefresh_url}) {
	my $refresh_interval = 15;
	if ($self->{refresh_interval}) { $refresh_interval = $self->{refresh_interval}; }
	print "<meta http-equiv='refresh' content='$refresh_interval; URL=$self->{autorefresh_url}'/>\n";
    }
    
    print "<link rel='SHORTCUT ICON' href='/treemap_images/favicon.ico'/>\n";

    print "<title>MLTreeMap: mapping DNA fragments onto the Tree of Life</title>\n";
    if ($self->{include_overlib_library} eq "on") {
	#print "<script type='text/javascript' src='/treemap_js/overlib$TREEMAP_globals::overlib_version.js'></script>\n";
    }

    ## include global javascript code:

    #print "<script type='text/javascript' src='/treemap_js/TREEMAP_scripts_$TREEMAP_globals::js_script_version.js'></script>\n";

    ## include the global TREEMAP css style (this may allow multiple 'skins' in the future):

    print "<link href='/treemap_css/treemap_standard_styles.v$TREEMAP_globals::css_version.css' rel='stylesheet' type='text/css'/>\n";

    print "</head>\n\n";

    print "<body>\n";


    print "<script type=\"text/javascript\">";

    print "var _gaq = _gaq || [];";
    print "_gaq.push(['_setAccount', 'UA-9803518-2']);";
    print "_gaq.push(['_trackPageview']);";

    print "(function() {";
    print "var ga = document.createElement('script'); ga.type =";
    print "'text/javascript'; ga.async = true;";
    print "ga.src = ('https:' == document.location.protocol ? 'https://ssl' :";
    print "'http://www') + '.google-analytics.com/ga.js';";
    print "(document.getElementsByTagName('head')[0] ||";
    print "document.getElementsByTagName('body')[0]).appendChild(ga);";
    print "})();";

    print "</script>";



    if ($self->{include_overlib_library} eq "on") {
        print "<div id='overDiv' style='position:absolute; visibility:hidden; z-index:1000;'></div>\n";
    }
    print "<table width='100%' border='0' cellspacing='0' cellpadding='0'><tr><td align='center'>\n";
 
    print "<table width='80%' border='0' cellspacing='0' cellpadding='0'>";

    if ($self->{title_illustration_visibility} eq "on") {
	print "<tr>";
	print "<td style='text-align: center; width: 180px;'><img src='/treemap_images/treemap_title_image_tol.png' width='120' height='120' alt=''/></td>";
	print "<td style='text-align: center;'><img src='/treemap_images/treemap_title_image_text.png' width='458' height='151' alt=''/></td>";
	print "<td style='text-align: center; width: 180px;'><img src='/treemap_images/treemap_title_image_bacteria.png' width='157' height='156' alt=''/></td>";
	print "</tr>\n";
	print "<tr><td colspan='3' style='height: 8px;'></td></tr>\n";
    }
    
    my $image_1_suffix = ""; $image_1_suffix = "_underlined" if $self->{active_menu_item} eq "1";
    my $image_2_suffix = ""; $image_2_suffix = "_underlined" if $self->{active_menu_item} eq "2";
    my $image_3_suffix = ""; $image_3_suffix = "_underlined" if $self->{active_menu_item} eq "3";
    my $image_4_suffix = ""; $image_4_suffix = "_underlined" if $self->{active_menu_item} eq "4";
    
    print "<tr><td align='left' colspan='2' style='white-space: nowrap;'>";
    print "<div style=\"background-image:url(/treemap_images/additional_images/top_spacer_long.png); background-repeat:repeat-x; margin:0px; padding:0px\">\n";
    print "<img src='/treemap_images/additional_images/top_start.png' width='20' height='39' alt=''/>\n";
    print "<a href='/treemap_cgi/treemap_input_page.pl?sessionId=$self->{sessionId}&amp;userId=$self->{userId}&amp;menu_call=1'>\n";
    print "<img src='/treemap_images/additional_images/top_new_query$image_1_suffix.png' width='100' height='39' alt=''/></a>\n";
    print "<img src='/treemap_images/additional_images/top_spacer_short.png' width='50' height='39' alt=''/>\n";
    print "<a href='/treemap_cgi/show_submitted_jobs.pl?sessionId=$self->{sessionId}&amp;userId=$self->{userId}&amp;menu_call=2'>\n";
    print "<img src='/treemap_images/additional_images/top_submitted_jobs$image_2_suffix.png' width='137' height='39' alt=''/></a>\n";
    print "<img src='/treemap_images/additional_images/top_spacer_short.png' width='50' height='39' alt=''/>\n";
    print "<a href='/treemap_cgi/show_download_page.pl?sessionId=$self->{sessionId}&amp;userId=$self->{userId}&amp;menu_call=3'>\n";
    print "<img src='/treemap_images/additional_images/top_downloads$image_3_suffix.png' width='101' height='39' alt=''/></a>\n";
    print "<img src='/treemap_images/additional_images/top_spacer_short.png' width='50' height='39' alt=''/>\n";
    print "<a href='/treemap_cgi/show_documentation_page.pl?sessionId=$self->{sessionId}&amp;userId=$self->{userId}&amp;menu_call=4'>\n";
    print "<img src='/treemap_images/additional_images/top_documentation$image_4_suffix.png' width='132' height='39' alt=''/></a>\n";
    print "<img src='/treemap_images/additional_images/top_spacer_short.png' width='50' height='39' alt=''/></div>\n";
    
    print "</td><td align='right' style='white-space: nowrap;'>\n";
    print "<div style=\"background-image:url(/treemap_images/additional_images/top_spacer_long.png); background-repeat:repeat-x; margin:0px; padding:0px\">\n";
    print "<a href='/treemap_cgi/treemap_input_page.pl?sessionId=$self->{sessionId}&amp;userId=$self->{userId}'>\n";
    print "<img src='/treemap_images/additional_images/top_mltreemap_logo.png' width='151' height='39' alt=''/></a>\n";
    print "<img src='/treemap_images/additional_images/top_end.png' width='20' height='39' alt=''/></div>\n";
    print "</td></tr>\n";

    print "<tr><td colspan='3' valign='top' align='center'>";

    print "<script type='text/javascript'>\n";
    print "<!--\n";
    print "//-->\n";
    print "</script>\n";
    print "<noscript>\n";
    print "<div style='color: red; font-style: italic;'>Warning: your browser appears to have Javascript disabled.<br/>Some of the features in TREEMAP may not be available to you<br/></div>\n";
    print "</noscript>\n";
}


#############################################################################################
## subroutine: gen_info_box_top ()
##
##
#############################################################################################

sub gen_info_box_top {

    my ($self, $title, $percent_width) = @_;

    my $table_width_attribute = ""; if (defined $percent_width) { $table_width_attribute = " width='$percent_width\%'"; }

    print "<table class='info_box' cellspacing='0' cellpadding='0'$table_width_attribute>\n";
    print "<tr><td class='info_box_title'>";

    print "<div style=\"padding: 7px 12px 6px 12px;\">\n";

#    print "<div style=\"background:url('/treemap_images/infoheader.upperright$image_sfx.png') no-repeat right top;\">\n";
#    print "<div style=\"background:url('/treemap_images/infoheader.lowerright$image_sfx.png') no-repeat right bottom;\">\n";
#    print "<div style=\"background:url('/treemap_images/infoheader.upperleft$image_sfx.png') no-repeat left top;\">\n";
#    print "<div style=\"background:url('/treemap_images/infoheader.lowerleft$image_sfx.png') no-repeat left bottom; padding: 8px 12px 7px 12px;\">\n";
#    print "<b>$title</b></div></div></div></div></td></tr>\n";

    print "<b>$title</b></div></td></tr>\n";

    print "<tr><td class='info_box_body'>\n";

    print "<div style=\"padding: 0px 8px 8px 8px;\">\n";

#    print "<div style=\"background:url('/treemap_images/infobox.upperright$image_sfx.png') no-repeat right top;\">\n";
#    print "<div style=\"background:url('/treemap_images/infobox.lowerright$image_sfx.png') no-repeat right bottom;\">\n";
#    print "<div style=\"background:url('/treemap_images/infobox.upperleft$image_sfx.png') no-repeat left top;\">\n";
#    print "<div style=\"background:url('/treemap_images/infobox.lowerleft$image_sfx.png') no-repeat left bottom; padding: 8px 8px 8px 8px;\">\n";
}

#############################################################################################
## subroutine: gen_info_box_bottom ()
##
##
#############################################################################################

sub gen_info_box_bottom {

    my ($self, $title) = @_;

#    print "</div></div></div></div></td></tr>";

    print "</div></td></tr>";
    print "</table>";
}

#####################################################################################
# subroutine to generate a standard information table top stylistically consistent
# with the rest of the web site. parameters are optional ...
# use it like:	
# 	gen_table_top ("TableTitle", $minimum_pixel_width, $percent_width);
#       print "<Lots> <of> <juicy> <html>";
#	gen_table_bot ();
#####################################################################################
  
sub gen_table_top {
    
    my ($self, $title, $minimum_pixel_width, $percent_width, $exact_width) = @_;
    unless ($title) { $title = " "; }
    unless ($minimum_pixel_width) { $minimum_pixel_width = 100; }
    my $table_width_tag = "";
    if ($percent_width) { $table_width_tag = "width=\"$percent_width%\""; }
    if ($exact_width) { $table_width_tag = "width=$exact_width"; }
    
    my $emphasis_color = "#BBB8BC";
    my $inner_color = "#FFFFFF";

    print "<table border='0' cellpadding='0' cellspacing='0' $table_width_tag>\n";
    print "<tr><td align='left' style='background-color:$emphasis_color;padding:0px 4px; 0px; 4px;border:4px;border-style:solid;border-color:$emphasis_color;text-align: center;'>\n";
    print "<b>$title</b></td>\n";
    print "</tr><tr><td style='background-color:$inner_color;padding:4px;border:4px;border-style:solid;border-color:$emphasis_color;' align='center'>\n";
}

####################################################################################################

sub gen_table_bot {

    my ($self) = @_;
    
    print "</td></tr></table>\n";
}


###############################################################################################
## same as gen_table top except this one's background is coloured grey as befits an input form 
###############################################################################################

sub gen_input_table_top {
   
    my ($self, $title, $minimum_pixel_width, $percent_width, $exact_width) = @_;
    unless ($title) { $title = " "; }
    unless ($minimum_pixel_width) { $minimum_pixel_width = 100; }
    my $table_width_tag = "";
    if ($percent_width) { $table_width_tag = "width=\"$percent_width%\""; }
    if ($exact_width) { $table_width_tag = "width=$exact_width"; }
    
    my $emphasis_color = $TREEMAP_globals::webcolor_emphasis;
    my $inner_color = $TREEMAP_globals::webcolor_standard_grey;
    my $small_emph_pic_src = "\"/treemap_images/small_fillpic_emph.gif\"";
    my $small_grey_pic_src = "\"/treemap_images/small_grey.png\"";
    
    print <<"HTML";
<table border=0 cellpadding=0 cellspacing=0 $table_width_tag>
 <tr>
  <td class=img_compact style=\"background-color:$emphasis_color;width=5px\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color;width=5px\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color;width=5px\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color;width=5px\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
 </tr>
 <tr>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td align=left style=\"background-color:$emphasis_color\"><b>$title</b></td>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
 </tr>
 <tr>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color\" colspan=3><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
 </tr>
 <tr>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=$minimum_pixel_width height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
 </tr>
 <tr>
  <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
  <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
HTML
print "<td style=\"background-color:$inner_color;text-height:0px\" align=left>";    ## don't want a newline here
   
}


##################################
## partner of gen_input_table_top 
##################################

sub gen_input_table_bot {
  
    
    my ($self) = @_;
    
    my $emphasis_color = $TREEMAP_globals::webcolor_emphasis;
    my $inner_color = $TREEMAP_globals::webcolor_standard_grey;
    my $small_emph_pic_src = "\"/treemap_images/small_fillpic_emph.gif\"";
    my $small_grey_pic_src = "\"/treemap_images/small_grey.png\"";
    

    print "</td>";

    print <<HTML;
      <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
    </tr>
    <tr>
      <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$inner_color\"><img src=$small_grey_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
    </tr>
    <tr>
      <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$emphasis_color\" colspan=3><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
      <td class=img_compact style=\"background-color:$emphasis_color\"><img src=$small_emph_pic_src width=5 height=5 alt=\"\"></td>
    </tr>
  </table>
HTML
  
}

###############################################################################################
## subroutine print_info_parameters_top: 
##
## this routine prints the first half of the general 'Info/Parameters-box' at the end
## of each TREEMAP result page. The actual content of the box changes slightly, depending on
## which view is shown, which is why this function comes in two halves (top, bottom).
## In between the two halves, view-specific stuff is printed.
###############################################################################################

sub print_info_parameters_top {

    my ($self, $infotext, $required_score, $limit, $active_evidence_channels, $action) = @_;

    my $updatecommand = "";
    $updatecommand = "onChange=\"UpdateNavigationButtonsFromForm (this); return true;\"" if ($self->{view_buttons_printed});

    my $actiontext = "action=\"$ENV{SCRIPT_NAME}\"";
    $actiontext = "action=\"$action\"" if defined $action;

    my $limitallchecked = ""; $limitallchecked = "checked" if ($limit eq 'all');
    my $limitotherchecked = ""; $limitotherchecked = "checked" unless ($limit eq 'all');
    $limit = 10 if ($limit eq 'all');

    my $highest_conf = $TREEMAP_globals::highest_confidence;
    my $high_conf = $TREEMAP_globals::high_confidence;
    my $medium_conf = $TREEMAP_globals::medium_confidence;
    my $low_conf = $TREEMAP_globals::low_confidence;
    my $scorehighest_selected = ""; my $scorehigh_selected = ""; my $scoremedium_selected = ""; 
    my $scorelow_selected = ""; my $custom_score_value = ""; my $custom_or_flag = "or";
    my $highest_limit = $TREEMAP_globals::highest_limit;
    my $high_limit = $TREEMAP_globals::high_limit;
    my $medium_limit = $TREEMAP_globals::medium_limit;
    my $low_limit = $TREEMAP_globals::low_limit;
    my $limithighest_selected = ""; my $limithigh_selected = ""; my $limitmedium_selected = ""; 
    my $limitlow_selected = ""; my $custom_limit_value = ""; my $custom_or_flag_limit = "or";
    
    my $normal_score_flag = 0; 
    
    if ($required_score == $low_conf) { $scorelow_selected = "selected"; $normal_score_flag = 1; }
    if ($required_score == $medium_conf) { $scoremedium_selected = "selected"; $normal_score_flag = 1; }
    if ($required_score == $high_conf) { $scorehigh_selected = "selected"; $normal_score_flag = 1; }
    if ($required_score == $highest_conf) { $scorehighest_selected = "selected"; $normal_score_flag = 1; }
    
    unless ($normal_score_flag) { 
	my $fractional_value = $required_score / 1000;
	while ((length $fractional_value) < 5) { $fractional_value .= "0"; }
	$fractional_value = "0.000" if $required_score == 0;
	$custom_score_value = "value=$fractional_value";
	$custom_or_flag = "";
    }

    my $normal_limit_flag = 0;

    if ($limit == $low_limit) { $limitlow_selected = "selected"; $normal_limit_flag = 1; }
    if ($limit == $medium_limit) { $limitmedium_selected = "selected"; $normal_limit_flag = 1; }
    if ($limit == $high_limit) { $limithigh_selected = "selected"; $normal_limit_flag = 1; }
    if ($limit == $highest_limit) { $limithighest_selected = "selected"; $normal_limit_flag = 1; }

    unless ($normal_limit_flag) { 
	$custom_limit_value = "value=$limit";
	$custom_or_flag_limit = "";
    }

    my $channel1_selected = ""; my $channel2_selected = ""; my $channel3_selected = ""; my $channel4_selected = ""; 
    my $channel5_selected = ""; my $channel6_selected = ""; my $channel7_selected = "";

    $channel1_selected = "checked" if $active_evidence_channels->{channel1} eq "on";
    $channel2_selected = "checked" if $active_evidence_channels->{channel2} eq "on";
    $channel3_selected = "checked" if $active_evidence_channels->{channel3} eq "on";
    $channel4_selected = "checked" if $active_evidence_channels->{channel4} eq "on";
    $channel5_selected = "checked" if $active_evidence_channels->{channel5} eq "on";
    $channel6_selected = "checked" if $active_evidence_channels->{channel6} eq "on";
    $channel7_selected = "checked" if $active_evidence_channels->{channel7} eq "on";

    $self->gen_input_table_top ("Info & Parameters...", 150, 0, 100);    

    print "                  <form $actiontext name=standard_parameters method=POST>\n";
    print "                    <table border=0 cellpadding=2 cellspacing=1>\n";
    print "                      <tr>\n";
    print "                        <td colspan=3>$infotext</td>\n";
    print "                      </tr>\n";
    print "                      <tr><td colspan=3><hr></td></tr>\n";
    print "                      <tr>\n";
    print "                        <td colspan=3>Active Prediction Methods:</td>\n";
    print "                      </tr>\n";
    print "                      <tr>\n";
    print "                        <td colspan=3>\n";
    print "                        <input name=channel1 type=checkbox $channel1_selected $updatecommand>Neighborhood ";
    print "                        <input name=channel2 type=checkbox $channel2_selected $updatecommand>Gene Fusion ";
    print "                        <input name=channel3 type=checkbox $channel3_selected $updatecommand>Co-occurrence <br/>";
    print "                        <input name=channel4 type=checkbox $channel4_selected $updatecommand>Co-expression";
    print "                        <input name=channel5 type=checkbox $channel5_selected $updatecommand>Experiments ";
    print "                        <input name=channel6 type=checkbox $channel6_selected $updatecommand>Databases ";
    print "                        <input name=channel7 type=checkbox $channel7_selected $updatecommand>Textmining ";
    print "                        </td>\n";
    print "                      </tr>\n";
    print "                      <tr><td colspan=3>&nbsp;</td></tr>\n";
    print "                      <tr>\n";
    print "                        <td style=\"white-space:nowrap\">required confidence (score):</td>\n";
    print "                        <td align=left><img src=\"/treemap_images/small_grey.png\" width=70 height=5 alt=\"\"></td>\n";
    print "                        <td style=\"white-space:nowrap\">interactors shown:</td>\n";
    print "                      </tr>\n";
    print "                      <tr>\n";
    print "                        <td style=\"white-space:nowrap\">\n";
    print "                          <select name=required_score $updatecommand>\n";
    print "                            <option selected value=$required_score>custom value\n" unless ($normal_score_flag);
    print "                            <option $scorehighest_selected value=$highest_conf>highest confidence (0.$highest_conf)\n";
    print "                            <option $scorehigh_selected value=$high_conf>high confidence (0.$high_conf)\n";
    print "                            <option $scoremedium_selected value=$medium_conf>medium confidence (0.$medium_conf)\n";
    print "                            <option $scorelow_selected value=$low_conf>low confidence (0.$low_conf)\n";
    print "                          </select>\n";
    print "                        </td>\n";
    print "                        <td align=left><img src=\"/treemap_images/small_grey.png\" width=70 height=5 alt=\"\"></td>\n";
    print "                        <td style=\"white-space:nowrap\">\n";
    print "                           <select name=limit $updatecommand>\n";
    print "                             <option selected value=$limit>custom limit\n" unless ($normal_limit_flag);
    print "                             <option $limitlow_selected value=$low_limit>no more than $low_limit interactors\n";
    print "                             <option $limitmedium_selected value=$medium_limit>no more than $medium_limit interactors\n";
    print "                             <option $limithigh_selected value=$high_limit>no more than $high_limit interactors\n";
    print "                             <option $limithighest_selected value=$highest_limit>no more than $highest_limit interactors\n";
    print "                           </select>\n";
    print "                         </td>\n";
    print "                      </tr>\n";
    print "                      <tr>\n";
    print "                        <td align=right style=\"white-space:nowrap\">$custom_or_flag custom value: ";
    print "                          <input name=custom_score size=8 maxlength=8 $custom_score_value $updatecommand></td>\n";
    print "                        <td align=left><img src=\"/treemap_images/small_grey.png\" width=70 height=5 alt=\"\"></td>\n";
    print "                        <td align=right style=\"white-space:nowrap\">$custom_or_flag_limit custom limit: ";
    print "                          <input name=custom_limit size=8 maxlength=8 $custom_limit_value $updatecommand></td>\n";
    print "                      </tr>\n";
    print "                      <tr>\n";
    print "                        <td colspan=3><hr></td>\n";
    print "                      </tr>\n";
}

###############################################################################################
## subroutine print_info_parameters_bottom:
##
## see previous function for explanation.
###############################################################################################

sub print_info_parameters_bottom {

    my ($self, $seed_identifier, $required_score, $limit) = @_;

    print "                      <tr>\n";
    print "                        <td colspan=3 align=left style=\"white-space:nowrap\"><input type=submit value=\"Update Parameters\"></td>\n";
    print "                        <td>\n";
    print "                          <input name=identifier type=hidden value=\"$seed_identifier\">\n";
    print "                          <input name=required_score type=hidden value=$required_score>\n";
    print "                          <input name=limit type=hidden value=$limit>\n";
    print "                          <input name=userId type=hidden value=$self->{userId}>\n";
    print "                          <input name=sessionId type=hidden value=$self->{sessionId}>\n";
    print "                        </td>\n";
    print "                      </tr>\n";
    print "                    </table>\n";
    print "                  </form>\n";
    
    $self->gen_input_table_bot ();
}

#############################################################################################
## subroutine: gen_error ()
##
## display a nice-looking error message, optionally with a suggestion saying 'go back'.
## Then, print the bottom of the page and just flatly exit; (this might be a bit abrupt, 
## change this and let the calling script exit ? maybe ... [CvM])
#############################################################################################

sub gen_error {
  
    my ($self, $error_message, $suppress_back_link) = @_;
    
    print "    &nbsp;<p>&nbsp;</p>\n";
    $self->gen_table_top ("error...", 250, 70);
    print "          &nbsp;<br/>\n";
    print "          $error_message\n";
    print "          <br/>&nbsp;";

    unless ($suppress_back_link) {
	print "          <br/>Please use the back button on your browser and try again...\n";
	print "          <br/>&nbsp;\n";
    }

    $self->gen_table_bot ();
    $self->print_navigation_bottom ();

    ## for debugging/tracking users, put some info into the apache error-log:
    
    my $truncated_message = substr ($error_message, 0, 30);
    print STDERR "nav module showed error message: '$truncated_message' taskId=$self->{taskId}\n";

    exit;
}

#########################################################################################################################################
## subroutine 'show_expiration_message'
## use this routine to inform the user that his session has expired. This routine is located here because expiration needs to be
## checked for in a variety of conexts.
#########################################################################################################################################

sub show_expiration_message {

    my ($self) = @_;
        
    print "<br/>&nbsp;<br/>\n";
    $self->gen_table_top ("Session Expired ...", 150, 50);

    print "&nbsp;<br/>Sorry, your data have expired. Due to limited resources on our server, user-results are usually deleted after two weeks.\n";
    print "This means that you cannot normally bookmark result pages to review them at a much later timepoint. <br/>&nbsp;<br/>If you do need to have\n";
    print "more long-term storage or if you want to directly link to some result pages, contact us and we will see how we can help you\n";
    print "(check the documentation page for email adresses).\n";
    print "<br/>&nbsp;<br/><a href=treemap_input_page.pl?taskId=_notask&amp;userId=$self->{userId}&amp;sessionId=$self->{sessionId}>";
    print "back to status-page</a><br/>\n";

    $self->gen_table_bot ();
    $self->print_navigation_bottom ();   
    exit;
}


sub gen_error_blast {
  
    my ($self) = @_;
    
    print "    &nbsp;<p>&nbsp;</p>\n";
    $self->gen_table_top ("Blast failed...", 250, 70);
    print "          &nbsp;<br/><table><center>\n";
    print "          Your sequence search has produced an error or has taken too long (timeout is $TREEMAP_globals::blast_timeout_seconds seconds).";
    print "          <br/>If the problem persists, please notify Treemap-authors ... (email addresses on Help/Info-page)\n</table>";
    print "          <br/>&nbsp;\n";
    $self->gen_table_bot ();
    $self->print_navigation_bottom ();

    ## for debugging/tracking users, put some info into the apache error-log:

    print STDERR "nav module showed error message: 'Your sequence search has produced an error or has taken too long' taskId=$self->{taskId}\n";
    
    exit;
}

sub gen_no_results {
  
    my ($self, $error_message) = @_;
    $self->print_navigation_top ();
    print "    &nbsp;<p>&nbsp;</p>\n";
    $self->gen_table_top ("No results", 250, 70);
    print "          &nbsp;<br/>\n";
    print "          $error_message\n";
    print "          <br/>&nbsp;<br/>\n";   
    print "          <a href=/$self->{cgi_path}/show_input_page.pl>back to startpage</a>\n";
    print "          <br/>&nbsp;\n";
    $self->gen_table_bot ();
    $self->print_navigation_bottom ();
    exit;
}

sub print_icons {

    # subroutine to generate the row of navigation icons (buttons) which links to network view, neighbourhood view, etc...

    my ($self, $buttons_string) = @_;

    ## alright, the buttons come with a bit of JavaScript:

    ## they are aware that there may be an HTML input-form on the page. If there is, 
    ## they make some assumptions about it's content and behave as additional submit buttons,
    ## if - and only if - the user has changed some values on the form.
    ##
    ## this is needed because some users overlook the 'update parameters' button on the form, and instead
    ## directly click on navigation buttons after changing a value. Without the javascript code
    ## below, such changes would not be noticed. If users have javascript turned off, *and* 
    ## overlook the submit-button ... well, that is bad luck then. 
    ## (actually, these days, most users have JavaScript on).

    print "<script type=\"text/javascript\">\n";  
    print "<!--\n";

    print <<"JAVASCRIPT";
    function UpdateNavigationButtonsFromForm (object) {

	if (! document.standard_parameters) { return true; }
	var identifier = document.standard_parameters.identifier.value;
	var score_select = document.standard_parameters.required_score;
        var required_score = score_select[0].value;

	var normal_score = 0;
	if (required_score == $TREEMAP_globals::low_confidence) { normal_score = 1; }
	if (required_score == $TREEMAP_globals::medium_confidence) { normal_score = 1; }
	if (required_score == $TREEMAP_globals::high_confidence) { normal_score = 1; }
	if (required_score == $TREEMAP_globals::highest_confidence) { normal_score = 1; }
	
	if (normal_score == 1) {
	    if (object.name == 'required_score') {
		document.standard_parameters.custom_score.value = '';
	    }
	}

	var custom_score = document.standard_parameters.custom_score.value;
	if (custom_score > 0) {
	    if (custom_score < 1) {
		required_score = custom_score * 1000;
	    }
	}

	var limit_select = document.standard_parameters.limit;
	var limit = limit_select[0].value;

	var normal_limit = 0;
	if (limit == $TREEMAP_globals::low_limit) { normal_limit = 1; }
	if (limit == $TREEMAP_globals::medium_limit) { normal_limit = 1; }
	if (limit == $TREEMAP_globals::high_limit) { normal_limit = 1; }
	if (limit == $TREEMAP_globals::highest_limit) { normal_limit = 1; }

	if (normal_limit == 1) {
	    if (object.name == 'limit') {
		document.standard_parameters.custom_limit.value = '';
	    }
	}

	var custom_limit = document.standard_parameters.custom_limit.value;
	if (custom_limit > 0) {
	    if (custom_limit < 100) {
		limit = custom_limit;
	    }
	}

	var conffac_parameter = '';
	if (document.standard_parameters.high_conf_fac) {
	    var conffac_select = document.standard_parameters.high_conf_fac;
	    var conffac = conffac_select[0].value;
	    conffac_parameter = '&high_conf_fac=' + conffac;
	}
	var netdepth_parameter = '';
	if (document.standard_parameters.network_depth) {
	    var netdepth_select = document.standard_parameters.network_depth;
	    var netdepth = netdepth_select[0].value;
	    netdepth_parameter = '&network_depth=' + netdepth;
	}
	var directneighbor_parameter = '';
	if (document.standard_parameters.direct_neighbor) {
	    var directneighbor_checkbox = document.standard_parameters.direct_neighbor;
	    var directneighbor_value = directneighbor_checkbox.checked;
	    if (directneighbor_value) { directneighbor_parameter = '&direct_neighbor=1'; }
	}

	var channel1_parameter = '';
	var channel1_checkbox = document.standard_parameters.channel1;
	var channel1_value = channel1_checkbox.checked;
	if (channel1_value) { channel1_parameter = '&channel1=on'; }

	var channel2_parameter = '';
	var channel2_checkbox = document.standard_parameters.channel2;
	var channel2_value = channel2_checkbox.checked;
	if (channel2_value) { channel2_parameter = '&channel2=on'; }

	var channel3_parameter = '';
	var channel3_checkbox = document.standard_parameters.channel3;
	var channel3_value = channel3_checkbox.checked;
	if (channel3_value) { channel3_parameter = '&channel3=on'; }

	var channel4_parameter = '';
	var channel4_checkbox = document.standard_parameters.channel4;
	var channel4_value = channel4_checkbox.checked;
	if (channel4_value) { channel4_parameter = '&channel4=on'; }

	var channel5_parameter = '';
	var channel5_checkbox = document.standard_parameters.channel5;
	var channel5_value = channel5_checkbox.checked;
	if (channel5_value) { channel5_parameter = '&channel5=on'; }

	var channel6_parameter = '';
	var channel6_checkbox = document.standard_parameters.channel6;
	var channel6_value = channel6_checkbox.checked;
	if (channel6_value) { channel6_parameter = '&channel6=on'; }

	var channel7_parameter = '';
	var channel7_checkbox = document.standard_parameters.channel7;
	var channel7_value = channel7_checkbox.checked;
	if (channel7_value) { channel7_parameter = '&channel7=on'; }
	
	var newparameters = 
	    'identifier=' + identifier 
	        + '&limit=' + limit 
		    + '&required_score=' + required_score
		        + conffac_parameter 
			    + netdepth_parameter
				+ directneighbor_parameter
				    + channel1_parameter
				        + channel2_parameter
					    + channel3_parameter
					        + channel4_parameter
						    + channel5_parameter
						        + channel6_parameter
							    + channel7_parameter;

	for (i = 0; i < document.anchors.length; i++) {
	    if (document.anchors[i].name == 'neighborhood_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_neighborhood.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	    if (document.anchors[i].name == 'fusion_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_fusion_evidence.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	    if (document.anchors[i].name == 'phylogeny_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_phylo_evidence.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	    if (document.anchors[i].name == 'experiments_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_experimental_evidence.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	    if (document.anchors[i].name == 'database_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_database_evidence.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	    if (document.anchors[i].name == 'textmining_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_textmining_evidence.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	    if (document.anchors[i].name == 'network_button_link') { 
		document.anchors[i].href = '/$self->{cgi_path}/show_network_section.pl?' + newparameters 
		    + '&amp;userId=$self->{userId}&sessionId=$self->{sessionId}';
	    }
	}
	return true;
    }
JAVASCRIPT

    print "-->\n";
    print "</script>\n";

    print "<table border='0' cellspacing='13'>\n";
    print "  <tr>\n";
    print "    <td align=center valign=middle><b>Views:</b></td>\n";
    if ($buttons_string =~ /neigh/) {
      print "    <td align=center >";
      print "<a name=neighborhood_button_link ";
      print "href=\"/$self->{cgi_path}/show_neighborhood.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/neighborhoodbutton.gif\" width=80 height=51 alt=\"\"></a></td>\n";
    }
    if ($buttons_string =~ /fus/) {
      print "    <td align=center>";
      print "<a name=fusion_button_link ";
      print "href=\"/$self->{cgi_path}/show_fusion_evidence.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/fusionbutton.gif\" width=49 height=51 alt=\"\"></a></td>\n";
    }
    if ($buttons_string =~ /phylo/) {
      print "    <td align=center>";
      print "<a name=phylogeny_button_link ";
      print "href=\"/$self->{cgi_path}/show_phylo_evidence.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/phylogenybutton.gif\" width=65 height=51 alt=\"\"></a></td>\n";
    }
    if ($buttons_string =~ /micro/) {
      print "    <td align=center>";
      print "<a name=coexpression_button_link ";
      print "href=\"/$self->{cgi_path}/show_coexpression_evidence.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/coexpressionbutton.gif\" width=72 height=51 alt=\"\"></a></td>\n";
    }
    if ($buttons_string =~ /exp/) {
      print "    <td align=center>";
      print "<a name=experiments_button_link ";
      print "href=\"/$self->{cgi_path}/show_experimental_evidence.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/experimentsbutton.gif\" width=69 height=51 alt=\"\"></a></td>\n";
    }
    if ($buttons_string =~ /database/) {
      print "    <td align=center>";
      print "<a name=database_button_link ";
      print "href=\"/$self->{cgi_path}/show_database_evidence.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/databasebutton.gif\" width=60 height=51 alt=\"\"></a></td>\n";
    }
    if ($buttons_string =~ /textmining/) {
      print "    <td align=center>";
      print "<a name=textmining_button_link ";
      print "href=\"/$self->{cgi_path}/show_textmining_evidence.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/textminingbutton.gif\" width=65 height=51 alt=\"\"></a></td>\n";
    }
    print "    <td style=\"background-color:#E6E2E6\">&nbsp;</td>\n";
    if ($buttons_string =~ /network/) {
      print "    <td align=center>";
      print "<a name=network_button_link ";
      print "href=\"/$self->{cgi_path}/show_network_section.pl?taskId=$self->{taskId}&amp;allnodes=1\">";
      print "<img src=\"/treemap_images/networkbutton.gif\" width=94 height=51 alt=\"\"></a></td>\n";
    }
    print "  </tr>\n";
    print "</table>\n";	

    $self->{view_buttons_printed} = 1;
}





1;



